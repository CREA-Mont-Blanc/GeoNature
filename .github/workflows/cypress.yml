name: Tests frontend
on:
  push:
    branches:
      - master
      - hotfixes
      - develop
  pull_request:
    branches:
      - master
      - hotfixes
      - develop

jobs:
  mount_app_and_run_cypress:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    services:
      postgres:
        image: postgis/postgis:13-3.2
        env:
          POSTGRES_DB: geonature2db
          POSTGRES_PASSWORD: geonatpasswd
          POSTGRES_USER: geonatadmin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Add postgis_raster database extension
        run: |
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "postgis_raster";'
        env:
          PGPASSWORD: geonatpasswd
      - name: Add database extensions
        run: |
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "hstore";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "uuid-ossp";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "pg_trgm";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "unaccent";'
        env:
          PGPASSWORD: geonatpasswd
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          # cache: 'pip'
      - name: Install GDAL
        run: |
          sudo apt update
          sudo apt install -y libgdal-dev

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-common.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install \
            pytest-cov \
            -e .[tests] \
            -r backend/requirements-common.txt \
            -e file:backend/dependencies/UsersHub-authentification-module#egg=pypnusershub \
            -e file:backend/dependencies/Nomenclature-api-module#egg=pypnnomenclature \
            -e file:backend/dependencies/Habref-api-module#egg=pypn_habref_api \
            -e file:backend/dependencies/TaxHub#egg=taxhub \
            -e file:backend/dependencies/Utils-Flask-SQLAlchemy#egg=utils-flask-sqlalchemy \
            -e file:backend/dependencies/Utils-Flask-SQLAlchemy-Geo#egg=utils-flask-sqlalchemy-geo \
            -e file:backend/dependencies/RefGeo#egg=pypn-ref-geo
      - name: Install database
        run: |
          geonature db upgrade taxonomie@head -x local-srid=2154  # because of missing dependency
          geonature db upgrade taxonomie_inpn_data@head
          geonature db upgrade geonature@head -x local-srid=2154
          geonature db autoupgrade -x local-srid=2154
          geonature db upgrade geonature-samples@head
          geonature db upgrade taxhub@head
          geonature db upgrade taxonomie_taxons_example@head

        env:
          GEONATURE_CONFIG_FILE: config/test_config.toml
      - name: Install core modules
        run: |
          geonature install_packaged_gn_module contrib/occtax OCCTAX --build=false
          geonature db upgrade occtax-samples-test@head
          geonature install_packaged_gn_module contrib/gn_module_occhab OCCHAB --build=false
          geonature db upgrade occhab-samples@head
          geonature install_packaged_gn_module contrib/gn_module_validation VALIDATION --build=false
        env:
          GEONATURE_CONFIG_FILE: config/test_config.toml
        # FRONTEND
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: install frontend
        run: |
          cp ./config/settings.ini.sample ./config/settings.ini 
          geonature generate_frontend_config --build=false
          geonature generate_frontend_tsconfig
          geonature generate_frontend_tsconfig_app
          geonature generate_frontend_modules_route
          ./install/05_install_frontend.sh --ci
        env:
          GEONATURE_CONFIG_FILE: config/test_config.toml
      - name: run GN backend
        run: geonature dev_back &
        env:
          GEONATURE_CONFIG_FILE: config/test_config.toml
      - name: run TX backend
        run: flask run --host=0.0.0.0 &
        working-directory: ./backend/dependencies/TaxHub/
        env:
          TAXHUB_SETTINGS: test_config.py
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: ${{ fromJSON(github.ref_name == 'master') }}
          working-directory: ./frontend
          start: npm run start-for-ci
          wait-on: http://127.0.0.1:4200
          headless: true
        env:
          is_master:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
